Consider a Example ,
A function to read multiple files may start reading files one by one and return the control to the execution 
environment immediately one after the other so that the next instruction can be executed.This is syncronous way of reading 
files. When a callback function is implemented for the same function it will request for the file and reads the file
meanwhile it wont stop execution of the program after of the completion of reading using callback function it returns 
either error if any or else the content of the file as a parameter. So there is no blocking or wait for File I/O.
This makes Node.js highly scalable, as it can process a high number of requests without waiting for any function
to return results.

Defination of callback:
Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task.
Node makes heavy use of callbacks. All the APIs of Node are written in such a way that they support callbacks. (or)
A callback is a function, “A,” that is passed to another function, “B,” as a parameter. The function “B” executes the code “A” at some point. The invocation of “A” can be immediate, as in a synchronous callback, or, it can occur later as in an asynchronous callback.
